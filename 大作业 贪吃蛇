#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>
#include<conio.h>
#include<time.h>
int scores=0;          //得分
int v=300;             //蛇运动速度
int number=0;          //玩家记录条数
typedef struct SNAKE   //定义结构体存储蛇节点
{
	int x;             //横坐标
    int y;             //纵坐标
    struct SNAKE *next;//下一个节点
}*snake,S;
typedef struct RAT     ////定义结构体存储玩家信息
{
	char id[100];
	char sex[5];
    int  score;
    int  rating;
} Infor;
Infor rate[100];      //记录玩家排行信息
void menu();                                               //主菜单
void gotoxy(int x,int y);                                  //光标定位至坐标(x,y)
void welcome();                                            //进入游戏
void gameover(Infor *p);                                   //游戏结束
void rule();                                               //游戏规则
void difficulty();                                         //设置游戏难度
Infor *direction(snake head,snake food,int dir,Infor *p);  //蛇的运动
void initfile();                                           //写文件
snake map();                                               //创建游戏地图
snake createfood(snake head);                              //随机产生食物
void start();                                              //开始游戏
void save(Infor *p);                                       //一次游戏结束后保存玩家信息
void sort();                                               //排序函数
void pai_hang();                                           //游戏排行榜
void filein();                                             //将玩家信息写入文件
void initfile()                                            //初始化游戏时读文件
{	
	FILE *fp;       //定义文件   
    char buf[256];  //便于处理文件中的空格
    char *p;
	if ( (fp = fopen("d:\\rate.txt", "r"))==NULL)
	{
		fp = fopen("d:\\rate.txt", "w");          //若不存在该文件，改为写，建立该文件
		return ;
	}
	while(1)
	{
		if (fgets(buf, 256, fp)==NULL)            //文件结束退出
			break;
		if (buf[0]=='\n')                         //空行继续
			continue;                               
		p = buf;
		sscanf(p, "%s%s%d%d", rate[number].id,rate[number].sex,&rate[number].score, &rate[number].rating); //将信息读入结构体
		number++;                                 //玩家数量增加
	}
	fclose(fp);
	sort();                                       //读完对玩家进行排名
	return ;
}
void gotoxy(int x,int y)                          //光标定位至(x,y)
{      
    COORD position;                               //COORD是Windows API中定义的一种结构，表示一个字符在控制台屏幕上的坐标             
    HANDLE Output;                                //定义一个句柄
    position.X=x;    
    position.Y=y;
    Output=GetStdHandle(STD_OUTPUT_HANDLE);       //GetStdHandle用来获取一个句柄
    SetConsoleCursorPosition(Output,position);    //SetConsoleCursorPosition是API中定位光标位置的函数。
}
void welcome()         //欢迎进入游戏界面                        
{
	int i;             //i用来遍历
	system("mode con cols=80 lines=40");  //设置控制台大小
    printf("\n\n\n\t\t\t   欢迎来到贪吃蛇游戏!\t\t\n");
	gotoxy(30,18);     //定位
	printf("加载中，请稍后");
    gotoxy(0,20);
    for(i=1;i<=5;i++)
	{
		printf("■■■■■■■■");
        Sleep(1000);   //暂停1000ms
    }
   system("cls");     //清屏
}
void difficulty()     //设置游戏难度
{
	int z;            //难度选择菜单
    char a[15];       //输入
	system("cls");
	printf("\t\t\t 请选择游戏难度\n\n");
    printf("\t\t\t   1.简单\n");
    printf("\t\t\t   2.一般\n");
    printf("\t\t\t   3.困难\n");
    gets(a);
    z=atoi(a);        //将字符串转换为数字
    while(z<1||z>3)
    {
	printf("输入有误，请重新输入！\n");
	    gets(a);
        z=atoi(a);
    }
	if(z==1)
		v=300;         //改变暂停时间，即改变了速度
	else if(z==2)
		v=120;
	else 
		v=50;
	system("cls");     //清屏
	menu();            //返回主菜单
}
void start()           //开始游戏
{  
	snake head,food;   //蛇头结点和食物节点
	int i=0,q=1;       //q=1表示该id第一次登陆
	char chose[10];      
	Infor *p;          //存储玩家信息的节点
	system("mode con cols=80 lines=40");  //设置控制台大小
	p=(Infor *)malloc(sizeof(Infor));  //动态申请内存 
	system("cls");
	printf("请输入您的id:\n");
	gets(p->id);             //输入id
    for(i=0;i<number;i++)    
	{
		if(strcmp(p->id,rate[i].id)==0)    //判断该id是否已存在
		{
			printf("该id已存在，是否继续使用？(y/n)\n");	
			while(1)
			{
				gets(chose);  
				if(strcmp(chose,"y")==0)
				{
					strcpy(p->sex,rate[i].sex);
					q=0;
					break;
				}
				else if(strcmp(chose,"n")==0)
				{
				    start();  //开始游戏
					break;
				}
                else 
					printf("输入不合法，请重新输入(y/n)\n");
			}
		}
	}
	if(q)
	{
		printf("请输入您的性别(b/g)\n");
	    while(1)
		{
			gets(p->sex);       //输入性别
            if(strcmp(p->sex,"g")!=0&&strcmp(p->sex,"b")!=0)
			    printf("输入不合法，请重新输入(b/g)\n");
		    else 
			    break;
		}
	}
	system("cls");
	gotoxy(30,18);	
	printf("加载中，请稍后");
    gotoxy(0,20);
    for(i=1;i<=5;i++)
	{
		printf("■■■■■■■■");
        Sleep(1000);
    }
    system("cls"); 
    head=map();     //创建地图
	food=createfood(head);     //生成食物
    direction(head,food,4,p);  //蛇开始运动了
}
void menu()    //主菜单
{  
	snake head=NULL,food=NULL;  //蛇头节点
    int z;
    char a[15];
	scores=0;
    printf("\n\n\t\t************************************************\n");
    printf("\t\t\t\t     主菜单\n\n");
    printf("\t\t\t\t   1.游戏规则\n");
    printf("\t\t\t\t   2.开始游戏\n");
    printf("\t\t\t\t   3.游戏排行榜\n");
    printf("\t\t\t\t   4.退出游戏\n");
    printf("\t\t\t\t   5.设置游戏难度\n");
    printf("\n\n\t\t*************************************************\n");
    printf("\t\t\t第一次进入游戏请仔细用阅读游戏规则\n\n");
    gets(a);
	fflush(stdin);     //清空输入缓存区
    z=atoi(a);
    while(z<1||z>5)
    {
	printf("输入有误，请重新输入！\n");
	    gets(a);fflush(stdin);
        z=atoi(a);
    }
    switch(z)
    {
        case 1: rule();break;     //查看规则 
	    case 2: start();break;    //开始游戏
		case 3: pai_hang();break; //查看排行
		case 4: exit(0);break;    //退出游戏
		case 5:difficulty();      //设置难度
    }
}
void rule()  //游戏规则
{   
	system("cls");
	printf("\t\t\t\t贪吃蛇游戏规则\n\n");
	printf("\t\t\t1.蛇头咬到自己蛇身即为失败\n");
	printf("\t\t\t3.蛇头碰到墙壁即为失败\n");
	printf("\t\t\t3.通过上下左右键控制蛇的移动方向\n");
	printf("\t\t\t4.若想要暂停，请按空格键\n");
	printf("\t\t\t5.若要终止游戏请按esc键,终止游戏则此次游戏分数无效\n");
	printf("\t\t\t6.初始难度为简单\n");
	printf("\t\t\t7.同一个id最终保留最高的分数\n\n");
	printf("按任意键返回主菜单\n");
	getch();
	system("cls");
    menu();   //返回菜单
}
snake map()  //画出游戏地图
{
	int i;
	snake head=NULL,second=NULL,pre=NULL;  //蛇头节点，食物节点，中间节点
	system("mode con cols=100 lines=40");
	for(i=0;i<=25;i++)  //输出边框
	{
		gotoxy(0,i);
		printf("■");
		gotoxy(60,i);
		printf("■");
	}
	for(i=0;i<=60;i+=2)
	{
		gotoxy(i,0);
		printf("■");
		gotoxy(i,25);
		printf("■");
	}
    head=(snake)malloc(sizeof(S));  //为蛇头申请内存
    head->x=8;
	head->y=5;
	pre=head;
	for(i=6;i>=2;i-=2)  //确定蛇身坐标
	{
        second=(snake)malloc(sizeof(S));
		second->x=i;
		second->y=5;
		second->next=NULL;
        pre->next=second;
		pre=second;
	}
	return head;  //返回蛇头节点
}
snake createfood(snake head)  //随机产生食物
{  
	int x,y;
    snake pre=head,food=NULL;
    gotoxy(63,1);
	printf("当前得分:%d",scores);
	srand((unsigned int)time(NULL));  //时间种子
	do
	{
		x=rand()%60;      //随机产生整数对边界取模
	}
	while(x%2!=0||x<=1);//由于一个■字符和汉字一样占了两个空间，故横坐标若是奇数则蛇头与食物不能对齐
	y=rand()%25;          
	if(y==0)              //若y与边界重合则重新产生食物
		return createfood(head);   
	while(pre!=NULL)       //若食物与蛇身重合，则重新产生食物
	{
		if(pre->x==x&&pre->y==y) //遍历蛇的每一个节点
		{
			return createfood(head); //递归调用
		}
		pre=pre->next;
	}
	food=(snake)malloc(sizeof(S));  //为食物节点申请内存
    food->x=x;
	food->y=y;
	food->next=NULL;
	gotoxy(food->x,food->y);
	printf("■");
	return food;
}
Infor* direction(snake head,snake food,int dir,Infor *p)  //蛇运动函数
{
	snake pre;  
	int x,y;  //坐标
	while(1)
	{   
        pre=head;
		while(pre!=NULL)
		{
			gotoxy(pre->x,pre->y);
			printf("■");
			pre=pre->next;
		}
		Sleep(v);
	    if(GetAsyncKeyState(VK_RIGHT)&&dir!=3)      //方向键右
		    dir=4;
        else if(GetAsyncKeyState(VK_LEFT)&&dir!=4)	//方向键左
	     	dir=3;
		else if(GetAsyncKeyState(VK_UP)&&dir!=2)    //方向键上
		    dir=1;
		else if(GetAsyncKeyState(VK_DOWN)&&dir!=1)  //方向键下
		    dir=2;
		else if(GetAsyncKeyState(VK_ESCAPE))        //Esc键退出
		{ 
			system("cls");                          
			menu();
			return p;
		}  
		else if(GetAsyncKeyState(VK_SPACE))         //空格键暂停 
		{
			Sleep(200);                             //停200ms
			while(1)
			{
				if(GetAsyncKeyState(VK_SPACE))      //再按一次
					break;
			}	
		}
    	if(dir==1)        //向上走
		{
		    x=head->x;
		    y=head->y-1;
		}
	    else if(dir==2)   //向下走
		{
		    x=head->x;
		    y=head->y+1;
		}
	    else if(dir==3)   //向左走
		{
		    x=head->x-2;
		    y=head->y;
		}
	    else if(dir==4)   //向右走
		{
		    x=head->x+2;
	        y=head->y;
		}

	    if(x>=60||x<=0||y<=0||y>=25)   //判断是否碰到边界
		{   
			fflush(stdin);
			pre=head;
			while(head!=NULL)
			{
				head=head->next;
				free(pre);
				pre=head;
			}
			free(food);    //释放空间
			gameover(p);   //游戏结束
			return p;
		}
		else if(x==food->x&&y==food->y) //吃到食物
		{
			scores+=10;     //加分
			food->next=head;
			head=food;
			food=createfood(head);
        }
		else 
		{
			pre=head;
			while(pre->next->next!=NULL)   
			{
				if(pre->next->x==x&&pre->next->y==y) //碰到自己
				{
					fflush(stdin);
					while(head!=NULL)
					{
				        head=head->next;
				        free(pre);
				        pre=head;
					}
					free(food); //释放食物空间
					gameover(p);  //游戏结束
					return p; 
				}
				pre=pre->next;
			}
			gotoxy(pre->next->x,pre->next->y);
			printf("  ");
			pre->next=NULL;
			free(pre->next);
			pre=head;
			head=(snake)malloc(sizeof(S));
            head->x=x;
			head->y=y;
			head->next=pre;
		}
	}
	return p;
}
void pai_hang()   //显示玩家排名
{
	FILE *fp;   
    char ch;  
	system("cls");   
    if((fp=fopen("d:\\rate.txt","r"))==NULL) {    //写文件
        printf("file cannot be opened/n");   
        exit(1);   
    }   
	printf("\t\t贪吃蛇排行榜\n\n");
	printf("玩家id\t\t玩家性别\t得分\t排名\n");
    while((ch=fgetc(fp))!=EOF)   
        fputc(ch,stdout);   
    fclose(fp);   
	printf("\n");
	system("pause");
	system("cls");
	menu();
}
void gameover(Infor *p)  //游戏结束
{
	char c;
	snake head=NULL,food=NULL;
	gotoxy(15,27);
	printf("游戏结束，您的得分：%d\n\n",scores);
	save(p);
	system("pause");
	fflush(stdin);
	printf("继续游戏？(y/n)\n");
	while(1)
	{
		
		c=getch();
		if(c=='y')
		{
			
	        system("cls");
	        head=map();
	        food=createfood(head);
            direction(head,food,4,p);
		}
		else if(c=='n')
		{
			system("cls");
			menu();
		}
	}
	system("cls");
	return ;
}
void save(Infor *p)  //保存信息
{
	int i;
	p->score=scores;
	for(i=0;i<number;i++)
	{
		if(strcmp(rate[i].id,p->id)==0)  //id进行匹配
		{
			if(p->score>rate[i].score)
				rate[i].score=p->score;
			break;
		}	
	}
    if(i>=number)
		rate[number++]=*p;
	sort();  //排序
	filein();
	scores=0;
}

void sort()  //将玩家按得分排名，选择排序
{
	int i,j,k=0;
	Infor *p;
	p=(Infor *)malloc(sizeof(Infor)); 
	for(i=0;i<number;i++)
	{
		k=i;  //标记
		for(j=i+1;j<number;j++)
			if(rate[j].score>rate[k].score)
				k=j;
       if(k!=i)  //交换
	   {
		   *p=rate[i];
		   rate[i]=rate[k];
           rate[k]=*p;
	   }
	   rate[i].rating=i+1;
	} 
	filein();
	free(p);
}
void filein()  //信息写入文件
{
	int i; 
	FILE *fp;
    if( ( fp = fopen("d:\\rate.txt", "w") ) == NULL)  //写文件
	{
   	    printf("File open error!\n"); 
   	    exit(0);
    }
	 for(i=0;i<number;i++)
        fprintf(fp,"%-16s%-16s%-10d%-10d\n",&rate[i].id,&rate[i].sex,rate[i].score,rate[i].rating);    
	 fclose(fp);
	 return ;
}
int main()  //主函数
{ 
	system("mode con cols=80 lines=40");  //设置屏幕大小
    initfile();   //文件初始操作
    welcome();    //欢迎界面
	menu();       //主菜单
}

